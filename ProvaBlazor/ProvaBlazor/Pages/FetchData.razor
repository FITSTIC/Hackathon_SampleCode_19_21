@page "/fetchdata"
@using ProvaBlazor.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext db

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a href="/weather" class="btn btn-primary">Inserisci</a>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>City</th>
                <th>Comandi</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>@forecast.City?.Name</td>
                    <td>
                        <a href="/weather/@forecast.Id" class="btn btn-link">Dettaglio</a>
                        <button class="btn btn-danger" @onclick="()=>DeleteRow(forecast)">Elimina</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    
    private WeatherForecast[] forecasts;

    private async Task DeleteRow(WeatherForecast forecast)
    {
        db.Previsioni.Remove(forecast);
        db.SaveChanges();

        await OnInitializedAsync();

        StateHasChanged();
    }

    

    protected override async Task OnInitializedAsync()
    {
        forecasts = await db.Previsioni
            .Include(x=>x.City) //JOIN su Cities
            .OrderByDescending(p=>p.Date)
            .ToArrayAsync();
    }
}
